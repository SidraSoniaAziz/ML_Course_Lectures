# -*- coding: utf-8 -*-
"""diabetes_model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YCWtZJKbe2Gx7NT7JGZqvCyuDcqREaL9
"""

import matplotlib
from matplotlib import pyplot as plt

import numpy as np
import pandas as pd

import sklearn
from sklearn import datasets,linear_model
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

diabetes = datasets.load_diabetes()

"""**We use .keys() to see all coulmns.**"""

print(diabetes.keys())

print(diabetes.data)

print(diabetes.DESCR)

"""# ***Now, we will perform Linear Regression on this datasets.***"""

diabetes_X = diabetes.data[:,np.newaxis,2]

#print(diabetes_X)

"""# ***Now, we will perform Train-Test Splitting on this datasets.***

# **X points are:**
"""

diabetes_X_train = diabetes_X[:-30]
diabetes_X_test = diabetes_X[-30:]

"""# **y Points are:**"""

diabetes_y_train = diabetes.target[:-30]
diabetes_y_test = diabetes.target[-30:]

"""# ***Now we make linear model***"""

model = linear_model.LinearRegression()

model.fit(diabetes_X_train,diabetes_y_train)

diabetes_y_predicted = model.predict(diabetes_X_test)

print("Mean Squared Error is: ",mean_squared_error(diabetes_y_test,diabetes_y_predicted))

print("Weight: ",model.coef_)
print("Intercept: ",model.intercept_)

plt.scatter(diabetes_X_test,diabetes_y_test)
plt.show()

plt.scatter(diabetes_X_test,diabetes_y_test)
plt.plot(diabetes_X_test,diabetes_y_predicted)
plt.show()

"""# ***Using multiple Features***"""

diabetes_X = diabetes.data

diabetes_X_train = diabetes_X[:-30]
diabetes_X_test = diabetes_X[-30:]

diabetes_y_train = diabetes.target[:-30]
diabetes_y_test = diabetes.target[-30:]

model.fit(diabetes_X_train,diabetes_y_train)

diabetes_y_predicted = model.predict(diabetes_X_test)

print("Mean Squared Error is : ",mean_squared_error(diabetes_y_test,diabetes_y_predicted))

print("Weights : ",model.coef_)
print("Intercept: ",model.intercept_)